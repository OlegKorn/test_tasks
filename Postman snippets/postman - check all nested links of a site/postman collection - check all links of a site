{
	"info": {
		"_postman_id": "2b4adf24-800f-4e39-9b25-503d25f7d9bd",
		"name": "Link checker https://crezu-fifth.finclic.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19492150"
	},
	"item": [
		{
			"name": "Initialize",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// set environment variables to default values",
							"postman.setEnvironmentVariable('links', '[]');",
							"postman.setEnvironmentVariable('url', postman.getEnvironmentVariable('start_url'));",
							"postman.setEnvironmentVariable('index', -1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{start_url}}",
					"host": [
						"{{start_url}}"
					]
				},
				"description": "Under the **Tests** tab, we will set a few more environment variables that will be used in the subsequent request, using the `setEnvironmentVariable()` method.\n\n  [![setEnvironmentVariable](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetEnv.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetEnv.png)\n"
			},
			"response": []
		},
		{
			"name": "Check URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// https://blog.postman.com/check-for-broken-links-on-your-website-using-a-postman-collection/",
							"",
							"// get environment variables",
							"var start_url = postman.getEnvironmentVariable('start_url');",
							"var root_url = postman.getEnvironmentVariable('root_url');",
							"var links = JSON.parse(postman.getEnvironmentVariable('links'));",
							"var url = postman.getEnvironmentVariable('url');",
							"var index = parseInt(postman.getEnvironmentVariable('index'));",
							"",
							"// increment index counter to access links in array to check",
							"index = index + 1;",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is below 15000ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(15000);  ",
							"});",
							"",
							"// if the current url includes the start_url, then this is an internal link and we should crawl it for more links",
							"// if (url.includes(start_url)) {",
							"if (url.includes(start_url)) {",
							"    // load the response body as HTML using cheerio, get the <a> tags",
							"    var $ = cheerio.load(responseBody);",
							"    ",
							"    $('a').each(function (index) {",
							"        var link = $(this).attr('href');",
							"",
							"        // if a link is relative",
							"        if (link.startsWith(\"/\")) {",
							"            link = start_url + $(this).attr('href').replace(\"http:/\", \"\");",
							"            pm.test(\"Status code is 200\", function () {",
							"                pm.response.to.have.status(200);",
							"            });",
							"        } else if (/^https?:\\/\\//.test(link)) {",
							"            pm.test(\"Status code is 200\", function () {",
							"                pm.response.to.have.status(200);",
							"            });",
							"        }",
							"",
							"        // add links to the links array if not already in there",
							"        // if you have additional links you would like to exclude, for example, ads, you can add this criteria as well",
							"        ",
							"        // this is russian federation issues, if these are not banned in your state",
							"        // delete this if:",
							"        if ( ",
							"            !links.includes(link) && ",
							"            !link.includes(\"skype\") && ",
							"            !link.includes(\"mailto\") &&",
							"            !link.includes(\"facebook\") &&",
							"            !link.includes(\"twitter\") &&",
							"            !link.startsWith(\"#\") &&",
							"            !link.includes(\"linkedin\")",
							"        ) {",
							"            links.push(link);",
							"        }",
							"    });",
							"}",
							"",
							"// if we've gone through all the links, return early",
							"if (links.length - 1 === index) {",
							"    console.log('no more links to check');",
							"    return;",
							"}",
							"",
							"// if link is a relative one, prepend with root_url",
							"url = links[index];",
							"",
							"if (! /^https?:\\/\\//.test(url)) {",
							"    url = root_url + url;",
							"} else {",
							"    url = url;",
							"}",
							"",
							"// update environment variable values",
							"postman.setEnvironmentVariable(\"links\", JSON.stringify(links));",
							"postman.setEnvironmentVariable(\"url\", url);",
							"postman.setEnvironmentVariable(\"index\", index);",
							"",
							"// continue calling the same request until all links are checked",
							"postman.setNextRequest(\"Check URL\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				},
				"description": "This request will crawl internal links and check all links for a healthy HTTP status code that is less than 400. \n\n**HTML scraping**\n\nFinding all the links on a page requires scraping HTML. The Postman Sandbox supports **cheerio** as a library for scraping HTML elements. Read more about [using the Postman Sandbox](https://www.getpostman.com/docs/postman/scripts/postman_sandbox) and other libraries and utilities supported in the pre-request and scripts sections.\n\n[![Cheerio HTML scraping](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/scrapeLinks.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/scrapeLinks.png)\n\n**Building workflows**\n\nThe `setNextRequest()` method accepts a request name or id within the same collection as a parameter. Use this method to establish a workflow sequence and designate which request in the same collection to run next, instead of defaulting to the linear execution. Read more about [building workflows](https://www.getpostman.com/docs/postman/collection_runs/building_workflows).\n\nIn this example, we will continue calling the same request until all links are checked.\n\n[![setNextRequest method](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetNextRequest.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/linkSetNextRequest.png)"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}